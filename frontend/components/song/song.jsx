import React from 'react';
import SongPlay from './song_play';
import SongDetailContainer from './song_detail_container';
// import Wavesurfer from 'react-wavesurfer';
var WaveformData = require('waveform-data');
var AV = require('./aurora.js');
require('mp3.js');
const context = new AudioContext();

// const a = new AudioContext();
// window.a = a;
// const xhr = new XMLHttpRequest();
//
// // .dat file generated by audiowaveform program
// xhr.responseType = "arraybuffer";
// xhr.open("GET", "https://res.cloudinary.com/winber1/video/upload/v1495061844/15._Weight_of_the_World_English_Version_jbsja7.mp3");
//
// xhr.addEventListener("load", progressEvent => {
//   debugger;
//   const waveform = WaveformData.create(progressEvent.target);
//   window.waveform = waveform;
//   console.log(waveform.duration);
// });

// xhr.send();
// fetch('https://res.cloudinary.com/winber1/video/upload/v1495061844/15._Weight_of_the_World_English_Version_jbsja7.mp3')
//   .then(response => response.arrayBuffer())
//   .then(buffer => {
//     const waveform = WaveformData.create(buffer);
//     debugger;
//     console.log(waveform.duration);
//   });

class Song extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      currenTime: 0,
      wavesurfer: undefined,
      player: undefined
    };
    this.showSong = this.showSong.bind(this);
  }

  componentWillReceiveProps(nextProps) {
    let nextAudio = nextProps.audio;
    let audio = this.props.audio;

    if (this.state.wavesurfer === undefined) return;

    if (audio.isPlaying === false ) {
      this.state.wavesurfer.pause();
    // } else if (nextAudio.song.id !== this.props.song.id &&
    // audio.song.id !== undefined) {
    //   let duration = audio.player.duration || 0;
    //   this.state.wavesurfer.play(audio.player.currentTime * duration);
    } else if (audio.song.id === this.props.song.id &&
    audio.song.id !== undefined) {
      this.state.wavesurfer.play(this.props.audio.player.currentTime);
    } else if (audio.song.id !== this.props.song.id &&
    audio.song.id !== undefined) {
      this.state.wavesurfer.pause();
      this.setState({ currentTime: audio.player.currentTime});
    }
  }

  componentDidMount() {
    let style = {
      container: `#waveform-${this.props.song.id}`,
      maxCanvasWidth: 500,
      waveColor: 'gray',
      progressColor: 'orangered',
      barWidth: 2,
      barHeight: 0.95,
      minPxPerSec: 50,
      hideScrollbar: true,
      height: 66,
      pixelRatio: 1,
      backend: 'MediaElement',
      cursorWidth: 0
    };
    //
    // let asset = AV.Asset.fromURL(this.props.song.track_url);
    // asset.get('duration',(buffer) => {
    //   window.asset = asset;
    //   window.buffer = buffer;
    //   console.log(buffer);
    //   debugger;
    // });

    // const xhr = new XMLHttpRequest();
    // xhr.responseType = "arraybuffer";
    // xhr.open("GET", this.props.song.track_url);

    // xhr.onload = e => {


      // waveform.offset(1000,13000);
      // let newWaveform = waveform.resample(500);
      // let data = newWaveform.min.map( el => Math.abs(el) / 180 );
      // let length = waveform.max.length;
      // let width = Math.floor(length / 128);
      // let data = waveform.max.slice(0,64).map( el => el / 150);
      // let data = [];
      // for (let i = 0; i < 64; i++) {
      //   let num = (waveform.at(Math.floor(i * width)) + waveform.at(Math.floor(i + width + 1)))/2
      //   data.push(num);
      // }
      // let processedData = [];
      // for (let i = 0; i < 128; i++) {
      //   let max = 0;
      //   waveform.max.slice(i * width, (i + 1) * width).forEach( el => max += el / 150);
      //   max = max / width;
      //   let min = 0;
      //   waveform.min.slice(i * width, (i + 1) * width).forEach( el => min += el / 150);
      //   min = min / width;
      //   // let num = (waveform.at(Math.floor(i * width)) + waveform.at(Math.floor(i + width + 1)))/2
      //   processedData.push( Math.abs((min + max) / 2));
      // }
      // data = data.map( el => {
      //   let val = Math.abs(el) / 150;
      //   return val < 0.3 ? Math.random() * 0.2 + 0.05 : val * (Math.random() * 0.1 + 1);
      // });
    // };

    // xhr.send();
    var wavesurfer = WaveSurfer.create(style);
    wavesurfer.load(this.props.song.track_url, [
      0.0218, 0.038, 0.084, 0.082, 0.091, 0.222, 0.3313,
      0.25, 0.3542, 0.4538, 0.2358, 0.3195, 0.3591,
      0.3599, 0.542, 0.7447, 0.6328, 0.8278, 0.6288,
      0.5645, 0.3218, 0.3005, 0.6828, 0.5051, 0.5664,
      0.5181, 0.5621, 0.5966, 0.689, 0.546, 0.5445, 0.4621,
      0.5618, 0.489, 0.7354, 0.8561, 0.6638, 0.7799, 0.7923,
      0.8659, 0.6675, 0.6268, 0.4984, 0.5997, 0.5248, 0.3495,
      0.4431, 0.5236, 0.4755, 0.3183, 0.3349, 0.4018, 0.5109,
      0.3833, 0.3813, 0.5422, 0.5961, 0.5191, 0.5791, 0.4631,
      0.5315, 0.5157, 0.3166, 0.2108
          ]);
    wavesurfer.setMute(true);
    wavesurfer.on('seek', (int) => this.selectTime(int));
    this.setState({
      wavesurfer: wavesurfer,
      player: this.props.audio.player
    });
  }

  selectTime(int) {
    let audio = this.props.audio;
    if (this.props.song.id === audio.song.id) {
      let player = this.state.player;
      let time = player.duration * int;
      player.currentTime = time;
      audio.isPlaying = true;
      this.setState({ currentTime: time});
      this.props.receiveAudio(audio);
    } else {
      audio.song = this.props.song;
      audio.isPlaying = true;
      audio.player.currentTime = 0;
      this.props.receiveAudio(audio);
    }
  }

  showSong() {
    let song = this.props.song;
    let user = song.user.username;
    window.location.hash = `/${user}/songs/${song.id}`;
  }

  render() {
    let song = this.props.song;
    let trackUrl = song.track_url || '';
    return (
      <li className='song-container'>
        <img onClick={this.showSong} src={song.image_url}></img>
        <ul className='song-info'>
          <SongPlay song={song} showSong={this.showSong}/>
          <div className='waveform-box'>
            <div id={`waveform-${this.props.song.id}`}>
            </div>
          </div>
          <SongDetailContainer song={song} comments={song.number_of_comments} />
        </ul>
      </li>
    );
  }
}

export default Song;
